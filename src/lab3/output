Keyword - package
Identifier - main
Keyword - import
Operator - (
StringLiteral - "fmt"
StringLiteral - "io/ioutil"
StringLiteral - "math"
StringLiteral - "net/http"
StringLiteral - "os"
StringLiteral - "strconv"
Operator - )
Identifier - funcmain
Operator - (
Operator - )
Operator - {
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "Hello world!"
Operator - )
Identifier - beyondHello
Operator - (
Operator - )
Operator - }
Keyword - func
Identifier - beyondHello
Operator - (
Operator - )
Operator - {
Keyword - var
Identifier - x
Identifier - int
Identifier - x
Operator - =
NumberLiteral - 3
Identifier - y
Operator - :=
Identifier - true
Identifier - sum
Operator - ,
Identifier - prod
Operator - :=
Identifier - learnMultiple
Operator - (
Identifier - x
Operator - ,
Identifier - y
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "sum:"
Operator - ,
Identifier - sum
Operator - ,
StringLiteral - "prod:"
Operator - ,
Identifier - prod
Operator - )
Identifier - learnTypes
Operator - (
Operator - )
Operator - }
Keyword - func
Identifier - learnMultiple
Operator - (
Identifier - x
Operator - ,
Identifier - y
Identifier - int
Operator - )
Operator - (
Identifier - sum
Operator - ,
Identifier - prod
Identifier - int
Operator - )
Operator - {
Keyword - return
Identifier - x
Operator - +
Identifier - y
Operator - ,
Identifier - x
Operator - *
Identifier - y
Operator - }
Keyword - func
Identifier - learnTypes
Operator - (
Operator - )
Operator - {
Identifier - str
Operator - :=
StringLiteral - "Learn Go!"
Identifier - s2
Operator - :=
RawStringLiteral - `A "raw" string literal
can include line breaks.`
Identifier - g
Operator - :=
CharLiteral - 'Î£'
Identifier - f
Operator - :=
NumberLiteral - 3.14195
Identifier - c
Operator - :=
NumberLiteral - 3
Operator - +
NumberLiteral - 4i
Keyword - var
Identifier - u
Identifier - uint
Operator - =
NumberLiteral - 7
Keyword - var
Identifier - pi
Identifier - float32
Operator - =
NumberLiteral - 22.
Operator - /
NumberLiteral - 7
Identifier - n
Operator - :=
Identifier - byte
Operator - (
CharLiteral - '\n'
Operator - )
Keyword - var
Identifier - a4
Operator - [
NumberLiteral - 4
Operator - ]
Identifier - int
Identifier - a5
Operator - :=
Operator - [
Operator - ...
Operator - ]
Identifier - int
Operator - {
NumberLiteral - 3
Operator - ,
NumberLiteral - 1
Operator - ,
NumberLiteral - 5
Operator - ,
NumberLiteral - 10
Operator - ,
NumberLiteral - 100
Operator - }
Identifier - a4_cpy
Operator - :=
Identifier - a4
Identifier - a4_cpy
Operator - [
NumberLiteral - 0
Operator - ]
Operator - =
NumberLiteral - 25
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - a4_cpy
Operator - [
NumberLiteral - 0
Operator - ]
Operator - ==
Identifier - a4
Operator - [
NumberLiteral - 0
Operator - ]
Operator - )
Identifier - s3
Operator - :=
Operator - [
Operator - ]
Identifier - int
Operator - {
NumberLiteral - 4
Operator - ,
NumberLiteral - 5
Operator - ,
NumberLiteral - 9
Operator - }
Identifier - s4
Operator - :=
Identifier - make
Operator - (
Operator - [
Operator - ]
Identifier - int
Operator - ,
NumberLiteral - 4
Operator - )
Keyword - var
Identifier - d2
Operator - [
Operator - ]
Operator - [
Operator - ]
Identifier - float64
Identifier - bs
Operator - :=
Operator - [
Operator - ]
Identifier - byte
Operator - (
StringLiteral - "a slice"
Operator - )
Identifier - s3_cpy
Operator - :=
Identifier - s3
Identifier - s3_cpy
Operator - [
NumberLiteral - 0
Operator - ]
Operator - =
NumberLiteral - 0
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - s3_cpy
Operator - [
NumberLiteral - 0
Operator - ]
Operator - ==
Identifier - s3
Operator - [
NumberLiteral - 0
Operator - ]
Operator - )
Identifier - s
Operator - :=
Operator - [
Operator - ]
Identifier - int
Operator - {
NumberLiteral - 1
Operator - ,
NumberLiteral - 2
Operator - ,
NumberLiteral - 3
Operator - }
Identifier - s
Operator - =
Identifier - append
Operator - (
Identifier - s
Operator - ,
NumberLiteral - 4
Operator - ,
NumberLiteral - 5
Operator - ,
NumberLiteral - 6
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - s
Operator - )
Identifier - s
Operator - =
Identifier - append
Operator - (
Identifier - s
Operator - ,
Operator - [
Operator - ]
Identifier - int
Operator - {
NumberLiteral - 7
Operator - ,
NumberLiteral - 8
Operator - ,
NumberLiteral - 9
Operator - }
Operator - ...
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - s
Operator - )
Identifier - p
Operator - ,
Identifier - q
Operator - :=
Identifier - learnMemory
Operator - (
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Operator - *
Identifier - p
Operator - ,
Operator - *
Identifier - q
Operator - )
Identifier - m
Operator - :=
Keyword - map
Operator - [
Identifier - string
Operator - ]
Identifier - int
Operator - {
StringLiteral - "three"
Operator - :
NumberLiteral - 3
Operator - ,
StringLiteral - "four"
Operator - :
NumberLiteral - 4
Operator - }
Identifier - m
Operator - [
StringLiteral - "one"
Operator - ]
Operator - =
NumberLiteral - 1
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - =
Identifier - str
Operator - ,
Identifier - s2
Operator - ,
Identifier - g
Operator - ,
Identifier - f
Operator - ,
Identifier - u
Operator - ,
Identifier - pi
Operator - ,
Identifier - n
Operator - ,
Identifier - a5
Operator - ,
Identifier - s4
Operator - ,
Identifier - bs
Identifier - file
Operator - ,
Identifier - _
Operator - :=
Identifier - os
Operator - .
Identifier - Create
Operator - (
StringLiteral - "output.txt"
Operator - )
Identifier - fmt
Operator - .
Identifier - Fprint
Operator - (
Identifier - file
Operator - ,
StringLiteral - "This is how you write to a file, by the way"
Operator - )
Identifier - file
Operator - .
Identifier - Close
Operator - (
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - s
Operator - ,
Identifier - c
Operator - ,
Identifier - a4
Operator - ,
Identifier - s3
Operator - ,
Identifier - d2
Operator - ,
Identifier - m
Operator - )
Identifier - learnFlowControl
Operator - (
Operator - )
Operator - }
Keyword - func
Identifier - learnNamedReturns
Operator - (
Identifier - x
Operator - ,
Identifier - y
Identifier - int
Operator - )
Operator - (
Identifier - z
Identifier - int
Operator - )
Operator - {
Identifier - z
Operator - =
Identifier - x
Operator - *
Identifier - y
Keyword - return
Operator - }
Keyword - func
Identifier - learnMemory
Operator - (
Operator - )
Operator - (
Identifier - p
Operator - ,
Identifier - q
Operator - *
Identifier - int
Operator - )
Operator - {
Identifier - p
Operator - =
Identifier - new
Operator - (
Identifier - int
Operator - )
Identifier - s
Operator - :=
Identifier - make
Operator - (
Operator - [
Operator - ]
Identifier - int
Operator - ,
NumberLiteral - 20
Operator - )
Identifier - s
Operator - [
NumberLiteral - 3
Operator - ]
Operator - =
NumberLiteral - 7
Identifier - r
Operator - :=
Operator - -
NumberLiteral - 2
Keyword - return
Operator - &
Identifier - s
Operator - [
NumberLiteral - 3
Operator - ]
Operator - ,
Operator - &
Identifier - r
Operator - }
Keyword - func
Identifier - expensiveComputation
Operator - (
Operator - )
Identifier - float64
Operator - {
Keyword - return
Identifier - m
Operator - .
Identifier - Exp
Operator - (
NumberLiteral - 10
Operator - )
Operator - }
Keyword - func
Identifier - learnFlowControl
Operator - (
Operator - )
Operator - {
Keyword - if
Identifier - true
Operator - {
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "told ya"
Operator - )
Operator - }
Keyword - if
Identifier - false
Operator - {
Operator - }
Keyword - else
Operator - {
Operator - }
Identifier - x
Operator - :=
NumberLiteral - 42.0
Keyword - switch
Identifier - x
Operator - {
Keyword - case
NumberLiteral - 0
Operator - :
Keyword - case
NumberLiteral - 1
Operator - ,
NumberLiteral - 2
Operator - :
Keyword - case
NumberLiteral - 42
Operator - :
Keyword - case
NumberLiteral - 43
Operator - :
Keyword - default
Operator - :
Operator - }
Keyword - var
Identifier - data
Keyword - interface
Operator - {
Operator - }
Identifier - data
Operator - =
StringLiteral - ""
Keyword - switch
Identifier - c
Operator - :=
Identifier - data
Operator - .
Operator - (
Keyword - type
Operator - )
Operator - {
Keyword - case
Identifier - string
Operator - :
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - c
Operator - ,
StringLiteral - "is a string"
Operator - )
Keyword - case
Identifier - int64
Operator - :
Identifier - fmt
Operator - .
Identifier - Printf
Operator - (
StringLiteral - "%d is an int64\n"
Operator - ,
Identifier - c
Operator - )
Keyword - default
Operator - :
Operator - }
Keyword - for
Identifier - x
Operator - :=
NumberLiteral - 0
Operator - ;
Identifier - x
Operator - <
NumberLiteral - 3
Operator - ;
Identifier - x
Operator - ++
Operator - {
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "iteration"
Operator - ,
Identifier - x
Operator - )
Operator - }
Keyword - for
Operator - {
Keyword - break
Keyword - continue
Operator - }
Keyword - for
Identifier - key
Operator - ,
Identifier - value
Operator - :=
Keyword - range
Keyword - map
Operator - [
Identifier - string
Operator - ]
Identifier - int
Operator - {
StringLiteral - "one"
Operator - :
NumberLiteral - 1
Operator - ,
StringLiteral - "two"
Operator - :
NumberLiteral - 2
Operator - ,
StringLiteral - "three"
Operator - :
NumberLiteral - 3
Operator - }
Operator - {
Identifier - fmt
Operator - .
Identifier - Printf
Operator - (
StringLiteral - "key=%s, value=%d\n"
Operator - ,
Identifier - key
Operator - ,
Identifier - value
Operator - )
Operator - }
Keyword - for
Identifier - _
Operator - ,
Identifier - name
Operator - :=
Keyword - range
Operator - [
Operator - ]
Identifier - string
Operator - {
StringLiteral - "Bob"
Operator - ,
StringLiteral - "Bill"
Operator - ,
StringLiteral - "Joe"
Operator - }
Operator - {
Identifier - fmt
Operator - .
Identifier - Printf
Operator - (
StringLiteral - "Hello, %s\n"
Operator - ,
Identifier - name
Operator - )
Operator - }
Keyword - if
Identifier - y
Operator - :=
Identifier - expensiveComputation
Operator - (
Operator - )
Operator - ;
Identifier - y
Operator - >
Identifier - x
Operator - {
Identifier - x
Operator - =
Identifier - y
Operator - }
Identifier - xBig
Operator - :=
Keyword - func
Operator - (
Operator - )
Identifier - bool
Operator - {
Keyword - return
Identifier - x
Operator - >
NumberLiteral - 10000
Operator - }
Identifier - x
Operator - =
NumberLiteral - 99999
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "xBig:"
Operator - ,
Identifier - xBig
Operator - (
Operator - )
Operator - )
Identifier - x
Operator - =
NumberLiteral - 1.3e3
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "xBig:"
Operator - ,
Identifier - xBig
Operator - (
Operator - )
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "Add + double two numbers: "
Operator - ,
Keyword - func
Operator - (
Identifier - a
Operator - ,
Identifier - b
Identifier - int
Operator - )
Identifier - int
Operator - {
Keyword - return
Operator - (
Identifier - a
Operator - +
Identifier - b
Operator - )
Operator - *
NumberLiteral - 2
Operator - }
Operator - (
NumberLiteral - 10
Operator - ,
NumberLiteral - 2
Operator - )
Operator - )
Keyword - goto
Identifier - love
Identifier - love
Operator - :
Identifier - learnFunctionFactory
Operator - (
Operator - )
Identifier - learnDefer
Operator - (
Operator - )
Identifier - learnInterfaces
Operator - (
Operator - )
Operator - }
Keyword - func
Identifier - learnFunctionFactory
Operator - (
Operator - )
Operator - {
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - sentenceFactory
Operator - (
StringLiteral - "summer"
Operator - )
Operator - (
StringLiteral - "A beautiful"
Operator - ,
StringLiteral - "day!"
Operator - )
Operator - )
Identifier - d
Operator - :=
Identifier - sentenceFactory
Operator - (
StringLiteral - "summer"
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - d
Operator - (
StringLiteral - "A beautiful"
Operator - ,
StringLiteral - "day!"
Operator - )
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - d
Operator - (
StringLiteral - "A lazy"
Operator - ,
StringLiteral - "afternoon!"
Operator - )
Operator - )
Operator - }
Keyword - func
Identifier - sentenceFactory
Operator - (
Identifier - mystring
Identifier - string
Operator - )
Keyword - func
Operator - (
Identifier - before
Operator - ,
Identifier - after
Identifier - string
Operator - )
Identifier - string
Operator - {
Keyword - return
Keyword - func
Operator - (
Identifier - before
Operator - ,
Identifier - after
Identifier - string
Operator - )
Identifier - string
Operator - {
Keyword - return
Identifier - fmt
Operator - .
Identifier - Sprintf
Operator - (
StringLiteral - "%s %s %s"
Operator - ,
Identifier - before
Operator - ,
Identifier - mystring
Operator - ,
Identifier - after
Operator - )
Operator - }
Operator - }
Keyword - func
Identifier - learnDefer
Operator - (
Operator - )
Operator - (
Identifier - ok
Identifier - bool
Operator - )
Operator - {
Keyword - defer
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "deferred statements execute in reverse (LIFO) order."
Operator - )
Keyword - defer
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "\nThis line is being printed first because"
Operator - )
Keyword - return
Identifier - true
Operator - }
Keyword - type
Identifier - Stringer
Keyword - interface
Operator - {
Identifier - String
Operator - (
Operator - )
Identifier - string
Operator - }
Keyword - type
Identifier - pair
Keyword - struct
Operator - {
Identifier - x
Operator - ,
Identifier - y
Identifier - int
Operator - }
Keyword - func
Operator - (
Identifier - p
Identifier - pair
Operator - )
Identifier - String
Operator - (
Operator - )
Identifier - string
Operator - {
Keyword - return
Identifier - fmt
Operator - .
Identifier - Sprintf
Operator - (
StringLiteral - "(%d, %d)"
Operator - ,
Identifier - p
Operator - .
Identifier - x
Operator - ,
Identifier - p
Operator - .
Identifier - y
Operator - )
Operator - }
Keyword - func
Identifier - learnInterfaces
Operator - (
Operator - )
Operator - {
Identifier - p
Operator - :=
Identifier - pair
Operator - {
NumberLiteral - 3
Operator - ,
NumberLiteral - 4
Operator - }
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - p
Operator - .
Identifier - String
Operator - (
Operator - )
Operator - )
Keyword - var
Identifier - i
Identifier - Stringer
Identifier - i
Operator - =
Identifier - p
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - i
Operator - .
Identifier - String
Operator - (
Operator - )
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - p
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - i
Operator - )
Identifier - learnVariadicParams
Operator - (
StringLiteral - "great"
Operator - ,
StringLiteral - "learning"
Operator - ,
StringLiteral - "here!"
Operator - )
Operator - }
Keyword - func
Identifier - learnVariadicParams
Operator - (
Identifier - myStrings
Operator - ...
Keyword - interface
Operator - {
Operator - }
Operator - )
Operator - {
Keyword - for
Identifier - _
Operator - ,
Identifier - param
Operator - :=
Keyword - range
Identifier - myStrings
Operator - {
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "param:"
Operator - ,
Identifier - param
Operator - )
Operator - }
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "params:"
Operator - ,
Identifier - fmt
Operator - .
Identifier - Sprintln
Operator - (
Identifier - myStrings
Operator - ...
Operator - )
Operator - )
Identifier - learnErrorHandling
Operator - (
Operator - )
Operator - }
Keyword - func
Identifier - learnErrorHandling
Operator - (
Operator - )
Operator - {
Identifier - m
Operator - :=
Keyword - map
Operator - [
Identifier - int
Operator - ]
Identifier - string
Operator - {
NumberLiteral - 3
Operator - :
StringLiteral - "three"
Operator - ,
NumberLiteral - 4
Operator - :
StringLiteral - "four"
Operator - }
Keyword - if
Identifier - x
Operator - ,
Identifier - ok
Operator - :=
Identifier - m
Operator - [
NumberLiteral - 1
Operator - ]
Operator - ;
Operator - !
Identifier - ok
Operator - {
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "no one there"
Operator - )
Operator - }
Keyword - else
Operator - {
Identifier - fmt
Operator - .
Identifier - Print
Operator - (
Identifier - x
Operator - )
Operator - }
Keyword - if
Identifier - _
Operator - ,
Identifier - err
Operator - :=
Identifier - strconv
Operator - .
Identifier - Atoi
Operator - (
StringLiteral - "non-int"
Operator - )
Operator - ;
Identifier - err
Operator - !=
Identifier - nil
Operator - {
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - err
Operator - )
Operator - }
Identifier - learnConcurrency
Operator - (
Operator - )
Operator - }
Keyword - func
Identifier - inc
Operator - (
Identifier - i
Identifier - int
Operator - ,
Identifier - c
Keyword - chan
Identifier - int
Operator - )
Operator - {
Identifier - c
Operator - <-
Identifier - i
Operator - +
NumberLiteral - 1
Operator - }
Keyword - func
Identifier - learnConcurrency
Operator - (
Operator - )
Operator - {
Identifier - c
Operator - :=
Identifier - make
Operator - (
Keyword - chan
Identifier - int
Operator - )
Keyword - go
Identifier - inc
Operator - (
NumberLiteral - 0
Operator - ,
Identifier - c
Operator - )
Keyword - go
Identifier - inc
Operator - (
NumberLiteral - 10
Operator - ,
Identifier - c
Operator - )
Keyword - go
Identifier - inc
Operator - (
Operator - -
NumberLiteral - 805
Operator - ,
Identifier - c
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Operator - <-
Identifier - c
Operator - ,
Operator - <-
Identifier - c
Operator - ,
Operator - <-
Identifier - c
Operator - )
Identifier - cs
Operator - :=
Identifier - make
Operator - (
Keyword - chan
Identifier - string
Operator - )
Identifier - ccs
Operator - :=
Identifier - make
Operator - (
Keyword - chan
Keyword - chan
Identifier - string
Operator - )
Keyword - go
Keyword - func
Operator - (
Operator - )
Operator - {
Identifier - c
Operator - <-
NumberLiteral - 84
Operator - }
Operator - (
Operator - )
Keyword - go
Keyword - func
Operator - (
Operator - )
Operator - {
Identifier - cs
Operator - <-
StringLiteral - "wordy"
Operator - }
Operator - (
Operator - )
Keyword - select
Operator - {
Keyword - case
Identifier - i
Operator - :=
Operator - <-
Identifier - c
Operator - :
Identifier - fmt
Operator - .
Identifier - Printf
Operator - (
StringLiteral - "it's a %T"
Operator - ,
Identifier - i
Operator - )
Keyword - case
Operator - <-
Identifier - cs
Operator - :
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "it's a string"
Operator - )
Keyword - case
Operator - <-
Identifier - ccs
Operator - :
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
StringLiteral - "didn't happen."
Operator - )
Operator - }
Identifier - learnWebProgramming
Operator - (
Operator - )
Operator - }
Keyword - func
Identifier - learnWebProgramming
Operator - (
Operator - )
Operator - {
Keyword - go
Keyword - func
Operator - (
Operator - )
Operator - {
Identifier - err
Operator - :=
Identifier - http
Operator - .
Identifier - ListenAndServe
Operator - (
StringLiteral - ":8080"
Operator - ,
Identifier - pair
Operator - {
Operator - }
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - err
Operator - )
Operator - }
Operator - (
Operator - )
Identifier - requestServer
Operator - (
Operator - )
Operator - }
Keyword - func
Operator - (
Identifier - p
Identifier - pair
Operator - )
Identifier - ServeHTTP
Operator - (
Identifier - w
Identifier - http
Operator - .
Identifier - ResponseWriter
Operator - ,
Identifier - r
Operator - *
Identifier - http
Operator - .
Identifier - Request
Operator - )
Operator - {
Identifier - w
Operator - .
Identifier - Write
Operator - (
Operator - [
Operator - ]
Identifier - byte
Operator - (
StringLiteral - "You learned Go in Y minutes!"
Operator - )
Operator - )
Operator - }
Keyword - func
Identifier - requestServer
Operator - (
Operator - )
Operator - {
Identifier - resp
Operator - ,
Identifier - err
Operator - :=
Identifier - http
Operator - .
Identifier - Get
Operator - (
StringLiteral - "http://localhost:8080"
Operator - )
Identifier - fmt
Operator - .
Identifier - Println
Operator - (
Identifier - err
Operator - )
Keyword - defer
Identifier - resp
Operator - .
Identifier - Body
Operator - .
Identifier - Close
Operator - (
Operator - )
Identifier - body
Operator - ,
Identifier - err
Operator - :=
Identifier - ioutil
Operator - .
Identifier - ReadAll
Operator - (
Identifier - resp
Operator - .
Identifier - Body
Operator - )
Identifier - fmt
Operator - .
Identifier - Printf
Operator - (
StringLiteral - "\nWebserver said: `%s`"
Operator - ,
Identifier - string
Operator - (
Identifier - body
Operator - )
Operator - )
Operator - }
NumberLiteral - 3
Unknown - Â±
NumberLiteral - 4
Operator - ;

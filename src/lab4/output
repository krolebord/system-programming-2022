Keyword - package
Identifier - main
Keyword - import
Delimiter - (
StringLiteral - "fmt"
StringLiteral - "io/ioutil"
StringLiteral - "math"
StringLiteral - "net/http"
StringLiteral - "os"
StringLiteral - "strconv"
Delimiter - )
Keyword - func
Identifier - main
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "Hello world!"
Delimiter - )
Identifier - beyondHello
Delimiter - (
Delimiter - )
Delimiter - }
Keyword - func
Identifier - beyondHello
Delimiter - (
Delimiter - )
Delimiter - {
Keyword - var
Identifier - x
Identifier - int
Identifier - x
Operator - =
NumberLiteral - 3
Identifier - y
Operator - :=
BoolLiteral - true
Identifier - sum
Operator - ,
Identifier - prod
Operator - :=
Identifier - learnMultiple
Delimiter - (
Identifier - x
Operator - ,
Identifier - y
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "sum:"
Operator - ,
Identifier - sum
Operator - ,
StringLiteral - "prod:"
Operator - ,
Identifier - prod
Delimiter - )
Identifier - learnTypes
Delimiter - (
Delimiter - )
Delimiter - }
Keyword - func
Identifier - learnMultiple
Delimiter - (
Identifier - x
Operator - ,
Identifier - y
Identifier - int
Delimiter - )
Delimiter - (
Identifier - sum
Operator - ,
Identifier - prod
Identifier - int
Delimiter - )
Delimiter - {
Keyword - return
Identifier - x
Operator - +
Identifier - y
Operator - ,
Identifier - x
Operator - *
Identifier - y
Delimiter - }
Keyword - func
Identifier - learnTypes
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - str
Operator - :=
StringLiteral - "Learn Go!"
Identifier - s2
Operator - :=
RawStringLiteral - `A "raw" string literal
can include line breaks.`
Identifier - g
Operator - :=
CharLiteral - 'Î£'
Identifier - f
Operator - :=
NumberLiteral - 3.14195
Identifier - c
Operator - :=
ComplexNumberLiteral - 3 + 4i
Keyword - var
Identifier - u
Identifier - uint
Operator - =
NumberLiteral - 7
Keyword - var
Identifier - pi
Identifier - float32
Operator - =
NumberLiteral - 22.
Operator - /
NumberLiteral - 7
Identifier - n
Operator - :=
Identifier - byte
Delimiter - (
CharLiteral - '\n'
Delimiter - )
Keyword - var
Identifier - a4
Operator - [
NumberLiteral - 4
Operator - ]
Identifier - int
Identifier - a5
Operator - :=
Operator - [
Operator - ...
Operator - ]
Identifier - int
Delimiter - {
NumberLiteral - 3
Operator - ,
NumberLiteral - 1
Operator - ,
NumberLiteral - 5
Operator - ,
NumberLiteral - 10
Operator - ,
NumberLiteral - 100
Delimiter - }
Identifier - a4_cpy
Operator - :=
Identifier - a4
Identifier - a4_cpy
Operator - [
NumberLiteral - 0
Operator - ]
Operator - =
NumberLiteral - 25
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - a4_cpy
Operator - [
NumberLiteral - 0
Operator - ]
Operator - ==
Identifier - a4
Operator - [
NumberLiteral - 0
Operator - ]
Delimiter - )
Identifier - s3
Operator - :=
Operator - [
Operator - ]
Identifier - int
Delimiter - {
NumberLiteral - 4
Operator - ,
NumberLiteral - 5
Operator - ,
NumberLiteral - 9
Delimiter - }
Identifier - s4
Operator - :=
Identifier - make
Delimiter - (
Operator - [
Operator - ]
Identifier - int
Operator - ,
NumberLiteral - 4
Delimiter - )
Keyword - var
Identifier - d2
Operator - [
Operator - ]
Operator - [
Operator - ]
Identifier - float64
Identifier - bs
Operator - :=
Operator - [
Operator - ]
Identifier - byte
Delimiter - (
StringLiteral - "a slice"
Delimiter - )
Identifier - s3_cpy
Operator - :=
Identifier - s3
Identifier - s3_cpy
Operator - [
NumberLiteral - 0
Operator - ]
Operator - =
NumberLiteral - 0
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - s3_cpy
Operator - [
NumberLiteral - 0
Operator - ]
Operator - ==
Identifier - s3
Operator - [
NumberLiteral - 0
Operator - ]
Delimiter - )
Identifier - s
Operator - :=
Operator - [
Operator - ]
Identifier - int
Delimiter - {
NumberLiteral - 1
Operator - ,
NumberLiteral - 2
Operator - ,
NumberLiteral - 3
Delimiter - }
Identifier - s
Operator - =
Identifier - append
Delimiter - (
Identifier - s
Operator - ,
NumberLiteral - 4
Operator - ,
NumberLiteral - 5
Operator - ,
NumberLiteral - 6
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - s
Delimiter - )
Identifier - s
Operator - =
Identifier - append
Delimiter - (
Identifier - s
Operator - ,
Operator - [
Operator - ]
Identifier - int
Delimiter - {
NumberLiteral - 7
Operator - ,
NumberLiteral - 8
Operator - ,
NumberLiteral - 9
Delimiter - }
Operator - ...
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - s
Delimiter - )
Identifier - p
Operator - ,
Identifier - q
Operator - :=
Identifier - learnMemory
Delimiter - (
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Operator - *
Identifier - p
Operator - ,
Operator - *
Identifier - q
Delimiter - )
Identifier - m
Operator - :=
Keyword - map
Operator - [
Identifier - string
Operator - ]
Identifier - int
Delimiter - {
StringLiteral - "three"
Operator - :
NumberLiteral - 3
Operator - ,
StringLiteral - "four"
Operator - :
NumberLiteral - 4
Delimiter - }
Identifier - m
Operator - [
StringLiteral - "one"
Operator - ]
Operator - =
NumberLiteral - 1
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - ,
Identifier - _
Operator - =
Identifier - str
Operator - ,
Identifier - s2
Operator - ,
Identifier - g
Operator - ,
Identifier - f
Operator - ,
Identifier - u
Operator - ,
Identifier - pi
Operator - ,
Identifier - n
Operator - ,
Identifier - a5
Operator - ,
Identifier - s4
Operator - ,
Identifier - bs
Identifier - file
Operator - ,
Identifier - _
Operator - :=
Identifier - os
Operator - .
Identifier - Create
Delimiter - (
StringLiteral - "output.txt"
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Fprint
Delimiter - (
Identifier - file
Operator - ,
StringLiteral - "This is how you write to a file, by the way"
Delimiter - )
Identifier - file
Operator - .
Identifier - Close
Delimiter - (
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - s
Operator - ,
Identifier - c
Operator - ,
Identifier - a4
Operator - ,
Identifier - s3
Operator - ,
Identifier - d2
Operator - ,
Identifier - m
Delimiter - )
Identifier - learnFlowControl
Delimiter - (
Delimiter - )
Delimiter - }
Keyword - func
Identifier - learnNamedReturns
Delimiter - (
Identifier - x
Operator - ,
Identifier - y
Identifier - int
Delimiter - )
Delimiter - (
Identifier - z
Identifier - int
Delimiter - )
Delimiter - {
Identifier - z
Operator - =
Identifier - x
Operator - *
Identifier - y
Keyword - return
Delimiter - }
Keyword - func
Identifier - learnMemory
Delimiter - (
Delimiter - )
Delimiter - (
Identifier - p
Operator - ,
Identifier - q
Operator - *
Identifier - int
Delimiter - )
Delimiter - {
Identifier - p
Operator - =
Identifier - new
Delimiter - (
Identifier - int
Delimiter - )
Identifier - s
Operator - :=
Identifier - make
Delimiter - (
Operator - [
Operator - ]
Identifier - int
Operator - ,
NumberLiteral - 20
Delimiter - )
Identifier - s
Operator - [
NumberLiteral - 3
Operator - ]
Operator - =
NumberLiteral - 7
Identifier - r
Operator - :=
NumberLiteral - -2
Keyword - return
Operator - &
Identifier - s
Operator - [
NumberLiteral - 3
Operator - ]
Operator - ,
Operator - &
Identifier - r
Delimiter - }
Keyword - func
Identifier - expensiveComputation
Delimiter - (
Delimiter - )
Identifier - float64
Delimiter - {
Keyword - return
Identifier - m
Operator - .
Identifier - Exp
Delimiter - (
NumberLiteral - 10
Delimiter - )
Delimiter - }
Keyword - func
Identifier - learnFlowControl
Delimiter - (
Delimiter - )
Delimiter - {
Keyword - if
BoolLiteral - true
Delimiter - {
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "told ya"
Delimiter - )
Delimiter - }
Keyword - if
BoolLiteral - false
Delimiter - {
Delimiter - }
Keyword - else
Delimiter - {
Delimiter - }
Identifier - x
Operator - :=
NumberLiteral - 42.0
Keyword - switch
Identifier - x
Delimiter - {
Keyword - case
NumberLiteral - 0
Operator - :
Keyword - case
NumberLiteral - 1
Operator - ,
NumberLiteral - 2
Operator - :
Keyword - case
NumberLiteral - 42
Operator - :
Keyword - case
NumberLiteral - 43
Operator - :
Keyword - default
Operator - :
Delimiter - }
Keyword - var
Identifier - data
Keyword - interface
Delimiter - {
Delimiter - }
Identifier - data
Operator - =
StringLiteral - ""
Keyword - switch
Identifier - c
Operator - :=
Identifier - data
Operator - .
Delimiter - (
Keyword - type
Delimiter - )
Delimiter - {
Keyword - case
Identifier - string
Operator - :
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - c
Operator - ,
StringLiteral - "is a string"
Delimiter - )
Keyword - case
Identifier - int64
Operator - :
Identifier - fmt
Operator - .
Identifier - Printf
Delimiter - (
StringLiteral - "%d is an int64\n"
Operator - ,
Identifier - c
Delimiter - )
Keyword - default
Operator - :
Delimiter - }
Keyword - for
Identifier - x
Operator - :=
NumberLiteral - 0
Delimiter - ;
Identifier - x
Operator - <
NumberLiteral - 3
Delimiter - ;
Identifier - x
Operator - +
Operator - +
Delimiter - {
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "iteration"
Operator - ,
Identifier - x
Delimiter - )
Delimiter - }
Keyword - for
Delimiter - {
Keyword - break
Keyword - continue
Delimiter - }
Keyword - for
Identifier - key
Operator - ,
Identifier - value
Operator - :=
Keyword - range
Keyword - map
Operator - [
Identifier - string
Operator - ]
Identifier - int
Delimiter - {
StringLiteral - "one"
Operator - :
NumberLiteral - 1
Operator - ,
StringLiteral - "two"
Operator - :
NumberLiteral - 2
Operator - ,
StringLiteral - "three"
Operator - :
NumberLiteral - 3
Delimiter - }
Delimiter - {
Identifier - fmt
Operator - .
Identifier - Printf
Delimiter - (
StringLiteral - "key=%s, value=%d\n"
Operator - ,
Identifier - key
Operator - ,
Identifier - value
Delimiter - )
Delimiter - }
Keyword - for
Identifier - _
Operator - ,
Identifier - name
Operator - :=
Keyword - range
Operator - [
Operator - ]
Identifier - string
Delimiter - {
StringLiteral - "Bob"
Operator - ,
StringLiteral - "Bill"
Operator - ,
StringLiteral - "Joe"
Delimiter - }
Delimiter - {
Identifier - fmt
Operator - .
Identifier - Printf
Delimiter - (
StringLiteral - "Hello, %s\n"
Operator - ,
Identifier - name
Delimiter - )
Delimiter - }
Keyword - if
Identifier - y
Operator - :=
Identifier - expensiveComputation
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - y
Operator - >
Identifier - x
Delimiter - {
Identifier - x
Operator - =
Identifier - y
Delimiter - }
Identifier - xBig
Operator - :=
Keyword - func
Delimiter - (
Delimiter - )
Identifier - bool
Delimiter - {
Keyword - return
Identifier - x
Operator - >
NumberLiteral - 10000
Delimiter - }
Identifier - x
Operator - =
NumberLiteral - 99999
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "xBig:"
Operator - ,
Identifier - xBig
Delimiter - (
Delimiter - )
Delimiter - )
Identifier - x
Operator - =
NumberLiteral - 1.3
Identifier - e3
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "xBig:"
Operator - ,
Identifier - xBig
Delimiter - (
Delimiter - )
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "Add + double two numbers: "
Operator - ,
Keyword - func
Delimiter - (
Identifier - a
Operator - ,
Identifier - b
Identifier - int
Delimiter - )
Identifier - int
Delimiter - {
Keyword - return
Delimiter - (
Identifier - a
Operator - +
Identifier - b
Delimiter - )
Operator - *
NumberLiteral - 2
Delimiter - }
Delimiter - (
NumberLiteral - 10
Operator - ,
NumberLiteral - 2
Delimiter - )
Delimiter - )
Keyword - go
Identifier - to
Identifier - love
Identifier - love
Operator - :
Identifier - learnFunctionFactory
Delimiter - (
Delimiter - )
Identifier - learnDefer
Delimiter - (
Delimiter - )
Identifier - learnInterfaces
Delimiter - (
Delimiter - )
Delimiter - }
Keyword - func
Identifier - learnFunctionFactory
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - sentenceFactory
Delimiter - (
StringLiteral - "summer"
Delimiter - )
Delimiter - (
StringLiteral - "A beautiful"
Operator - ,
StringLiteral - "day!"
Delimiter - )
Delimiter - )
Identifier - d
Operator - :=
Identifier - sentenceFactory
Delimiter - (
StringLiteral - "summer"
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - d
Delimiter - (
StringLiteral - "A beautiful"
Operator - ,
StringLiteral - "day!"
Delimiter - )
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - d
Delimiter - (
StringLiteral - "A lazy"
Operator - ,
StringLiteral - "afternoon!"
Delimiter - )
Delimiter - )
Delimiter - }
Keyword - func
Identifier - sentenceFactory
Delimiter - (
Identifier - mystring
Identifier - string
Delimiter - )
Keyword - func
Delimiter - (
Identifier - before
Operator - ,
Identifier - after
Identifier - string
Delimiter - )
Identifier - string
Delimiter - {
Keyword - return
Keyword - func
Delimiter - (
Identifier - before
Operator - ,
Identifier - after
Identifier - string
Delimiter - )
Identifier - string
Delimiter - {
Keyword - return
Identifier - fmt
Operator - .
Identifier - Sprintf
Delimiter - (
StringLiteral - "%s %s %s"
Operator - ,
Identifier - before
Operator - ,
Identifier - mystring
Operator - ,
Identifier - after
Delimiter - )
Delimiter - }
Delimiter - }
Keyword - func
Identifier - learnDefer
Delimiter - (
Delimiter - )
Delimiter - (
Identifier - ok
Identifier - bool
Delimiter - )
Delimiter - {
Keyword - defer
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "deferred statements execute in reverse (LIFO) order."
Delimiter - )
Keyword - defer
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "\nThis line is being printed first because"
Delimiter - )
Keyword - return
BoolLiteral - true
Delimiter - }
Keyword - type
Identifier - Stringer
Keyword - interface
Delimiter - {
Identifier - String
Delimiter - (
Delimiter - )
Identifier - string
Delimiter - }
Keyword - type
Identifier - pair
Keyword - struct
Delimiter - {
Identifier - x
Operator - ,
Identifier - y
Identifier - int
Delimiter - }
Keyword - func
Delimiter - (
Identifier - p
Identifier - pair
Delimiter - )
Identifier - String
Delimiter - (
Delimiter - )
Identifier - string
Delimiter - {
Keyword - return
Identifier - fmt
Operator - .
Identifier - Sprintf
Delimiter - (
StringLiteral - "(%d, %d)"
Operator - ,
Identifier - p
Operator - .
Identifier - x
Operator - ,
Identifier - p
Operator - .
Identifier - y
Delimiter - )
Delimiter - }
Keyword - func
Identifier - learnInterfaces
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - p
Operator - :=
Identifier - pair
Delimiter - {
NumberLiteral - 3
Operator - ,
NumberLiteral - 4
Delimiter - }
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - p
Operator - .
Identifier - String
Delimiter - (
Delimiter - )
Delimiter - )
Keyword - var
Identifier - i
Identifier - Stringer
Identifier - i
Operator - =
Identifier - p
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - i
Operator - .
Identifier - String
Delimiter - (
Delimiter - )
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - p
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - i
Delimiter - )
Identifier - learnVariadicParams
Delimiter - (
StringLiteral - "great"
Operator - ,
StringLiteral - "learning"
Operator - ,
StringLiteral - "here!"
Delimiter - )
Delimiter - }
Keyword - func
Identifier - learnVariadicParams
Delimiter - (
Identifier - myStrings
Operator - ...
Keyword - interface
Delimiter - {
Delimiter - }
Delimiter - )
Delimiter - {
Keyword - for
Identifier - _
Operator - ,
Identifier - param
Operator - :=
Keyword - range
Identifier - myStrings
Delimiter - {
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "param:"
Operator - ,
Identifier - param
Delimiter - )
Delimiter - }
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "params:"
Operator - ,
Identifier - fmt
Operator - .
Identifier - Sprintln
Delimiter - (
Identifier - myStrings
Operator - ...
Delimiter - )
Delimiter - )
Identifier - learnErrorHandling
Delimiter - (
Delimiter - )
Delimiter - }
Keyword - func
Identifier - learnErrorHandling
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - m
Operator - :=
Keyword - map
Operator - [
Identifier - int
Operator - ]
Identifier - string
Delimiter - {
NumberLiteral - 3
Operator - :
StringLiteral - "three"
Operator - ,
NumberLiteral - 4
Operator - :
StringLiteral - "four"
Delimiter - }
Keyword - if
Identifier - x
Operator - ,
Identifier - ok
Operator - :=
Identifier - m
Operator - [
NumberLiteral - 1
Operator - ]
Delimiter - ;
Operator - !
Identifier - ok
Delimiter - {
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "no one there"
Delimiter - )
Delimiter - }
Keyword - else
Delimiter - {
Identifier - fmt
Operator - .
Identifier - Print
Delimiter - (
Identifier - x
Delimiter - )
Delimiter - }
Keyword - if
Identifier - _
Operator - ,
Identifier - err
Operator - :=
Identifier - strconv
Operator - .
Identifier - Atoi
Delimiter - (
StringLiteral - "non-int"
Delimiter - )
Delimiter - ;
Identifier - err
Operator - !
Operator - =
Identifier - nil
Delimiter - {
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - err
Delimiter - )
Delimiter - }
Identifier - learnConcurrency
Delimiter - (
Delimiter - )
Delimiter - }
Keyword - func
Identifier - inc
Delimiter - (
Identifier - i
Identifier - int
Operator - ,
Identifier - c
Keyword - chan
Identifier - int
Delimiter - )
Delimiter - {
Identifier - c
Operator - <-
Identifier - i
Operator - +
NumberLiteral - 1
Delimiter - }
Keyword - func
Identifier - learnConcurrency
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - c
Operator - :=
Identifier - make
Delimiter - (
Keyword - chan
Identifier - int
Delimiter - )
Keyword - go
Identifier - inc
Delimiter - (
NumberLiteral - 0
Operator - ,
Identifier - c
Delimiter - )
Keyword - go
Identifier - inc
Delimiter - (
NumberLiteral - 10
Operator - ,
Identifier - c
Delimiter - )
Keyword - go
Identifier - inc
Delimiter - (
NumberLiteral - -805
Operator - ,
Identifier - c
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Operator - <-
Identifier - c
Operator - ,
Operator - <-
Identifier - c
Operator - ,
Operator - <-
Identifier - c
Delimiter - )
Identifier - cs
Operator - :=
Identifier - make
Delimiter - (
Keyword - chan
Identifier - string
Delimiter - )
Identifier - ccs
Operator - :=
Identifier - make
Delimiter - (
Keyword - chan
Keyword - chan
Identifier - string
Delimiter - )
Keyword - go
Keyword - func
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - c
Operator - <-
NumberLiteral - 84
Delimiter - }
Delimiter - (
Delimiter - )
Keyword - go
Keyword - func
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - cs
Operator - <-
StringLiteral - "wordy"
Delimiter - }
Delimiter - (
Delimiter - )
Keyword - select
Delimiter - {
Keyword - case
Identifier - i
Operator - :=
Operator - <-
Identifier - c
Operator - :
Identifier - fmt
Operator - .
Identifier - Printf
Delimiter - (
StringLiteral - "it's a %T"
Operator - ,
Identifier - i
Delimiter - )
Keyword - case
Operator - <-
Identifier - cs
Operator - :
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "it's a string"
Delimiter - )
Keyword - case
Operator - <-
Identifier - ccs
Operator - :
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
StringLiteral - "didn't happen."
Delimiter - )
Delimiter - }
Identifier - learnWebProgramming
Delimiter - (
Delimiter - )
Delimiter - }
Keyword - func
Identifier - learnWebProgramming
Delimiter - (
Delimiter - )
Delimiter - {
Keyword - go
Keyword - func
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - err
Operator - :=
Identifier - http
Operator - .
Identifier - ListenAndServe
Delimiter - (
StringLiteral - ":8080"
Operator - ,
Identifier - pair
Delimiter - {
Delimiter - }
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - err
Delimiter - )
Delimiter - }
Delimiter - (
Delimiter - )
Identifier - requestServer
Delimiter - (
Delimiter - )
Delimiter - }
Keyword - func
Delimiter - (
Identifier - p
Identifier - pair
Delimiter - )
Identifier - ServeHTTP
Delimiter - (
Identifier - w
Identifier - http
Operator - .
Identifier - ResponseWriter
Operator - ,
Identifier - r
Operator - *
Identifier - http
Operator - .
Identifier - Request
Delimiter - )
Delimiter - {
Identifier - w
Operator - .
Identifier - Write
Delimiter - (
Operator - [
Operator - ]
Identifier - byte
Delimiter - (
StringLiteral - "You learned Go in Y minutes!"
Delimiter - )
Delimiter - )
Delimiter - }
Keyword - func
Identifier - requestServer
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - resp
Operator - ,
Identifier - err
Operator - :=
Identifier - http
Operator - .
Identifier - Get
Delimiter - (
StringLiteral - "http://localhost:8080"
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Println
Delimiter - (
Identifier - err
Delimiter - )
Keyword - defer
Identifier - resp
Operator - .
Identifier - Body
Operator - .
Identifier - Close
Delimiter - (
Delimiter - )
Identifier - body
Operator - ,
Identifier - err
Operator - :=
Identifier - ioutil
Operator - .
Identifier - ReadAll
Delimiter - (
Identifier - resp
Operator - .
Identifier - Body
Delimiter - )
Identifier - fmt
Operator - .
Identifier - Printf
Delimiter - (
StringLiteral - "\nWebserver said: `%s`"
Operator - ,
Identifier - string
Delimiter - (
Identifier - body
Delimiter - )
Delimiter - )
Delimiter - }
NumberLiteral - 3
Unknown - Â±
NumberLiteral - 4
Delimiter - ;
